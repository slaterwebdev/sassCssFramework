//MEDIA QUERIES
//using sass variables from a map in a mixin to create class based media queries 

//Size Maps
$breakpoints: (
    "xs" : 0px,
    "sm" : 480px,
    "md" : 720px,
    "lg" : 960px,
    "xl" : 1200px
);

$grid-gaps: (
    '0': 0,
    '1': 5px,
    '2': 10px,
    '3': 15px
);

//LISTS 
//Much like an array in JS - a SASS list 
$layout-list: flex-start, flex-end, center, space-between, space-around ;
//creating mixin (like sass array/object - list of styles - making a media query to be a property is has - and making the min width = to a mproperty from theh breakpoint map using a sass built in function)
@each $val in $layout-list {
    .justify-#{$val} {
        justify-content: $val;
    }
}

@mixin baseCol {
    @media screen and (min-width: map-get($breakpoints, "xs")) {
        @content;
    }
}

@mixin xs { //STORING MEDIA QUERY IN MIXIN
    @media  screen and (min-width: map-get($breakpoints, "xs")) {
        @content; //Keyword - It is a placeholder for a mixins content and will be replaced by what you include in your mixin invocation
    }
};

@mixin sm { //mixin invocation can now include styles which will take the place of @content in tha mixin definition
    @media  screen and (min-width: map-get($breakpoints, "sm")) {
        @content;
    }
};

@mixin md {
    @media  screen and (min-width: map-get($breakpoints, "md")) {
        @content;
    }
};

@mixin lg {
    @media  screen and (min-width: map-get($breakpoints, "lg")) {
        @content;
    }
};

@mixin xl {
    @media  screen and (min-width: map-get($breakpoints, "xl")) {
        @content;
    }
};

//GRID SYSTEM 
@each $key, $val in $grid-gaps {
    .g-#{$key} {
        margin-left: $val;
        margin-right: $val;
    }
};